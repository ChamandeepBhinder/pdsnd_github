{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york city': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }\n",
    "\n",
    "def get_filters():\n",
    "    \"\"\"\n",
    "    Asks user to specify a city, month, and day to analyze.\n",
    "\n",
    "    Returns:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    \"\"\"\n",
    "    print('Hello! Let\\'s explore some US bikeshare data!')\n",
    "    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "city = input(\"Please choose one of the three cities: chicago, new york city, washington:\\n\").lower()\n",
    "while city not in [\"chicago\", \"new york city\", \"washington\"]:\n",
    "    print(\"You did not type the correct name, please try it again:\\n\")\n",
    "    city = input(\"Please choose one of the three cities: chicago, new york city, washington:\\n\").lower()\n",
    "\n",
    "    # TO DO: get user input for month (all, january, february, ... , june)\n",
    "month = input(\"Please choose one of the following months: january, februrary, march, april, may, june, all:\\n\").lower()\n",
    "while month not in [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"all\"]:\n",
    "    print(\"You did not type the correct name, please try it again:\\n\")\n",
    "    month = input(\"Please choose one of the following months: january, februrary, march, april, may, june, all:\\n\").lower()\n",
    "\n",
    "    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "day = input(\"Please choose one of the following day of week: monday, tuesday, wednesday, thursday, friday, all:\\n\").lower()\n",
    "while day not in [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"all\"]:\n",
    "    print(\"You did not type the correct name, please try it again:\\n\")\n",
    "    day = input(\"Please choose one of the following day of week: monday, tuesday, wednesday, thursday, friday, all:\\n\").lower()\n",
    "    \n",
    "\n",
    "\n",
    "    print('-'*40)\n",
    "    return city, month, day\n",
    "\n",
    "\n",
    "def load_data(city, month, day):\n",
    "    \"\"\"\n",
    "    Loads data for the specified city and filters by month and day if applicable.\n",
    "\n",
    "    Args:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    Returns:\n",
    "        df - Pandas DataFrame containing city data filtered by month and day\n",
    "    \"\"\"\n",
    "df = pd.read_csv(CITY_DATA[city])\n",
    "df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "df['month'] = df['Start Time'].dt.month\n",
    "df['day_of_week'] = df['Start Time'].dt.weekday_name\n",
    "if month != 'all':\n",
    "            months = ['january', 'february', 'march', 'april', 'may', 'june']\n",
    "            month = months.index(month) + 1\n",
    "            df = df[df['month'] == month]\n",
    "if day != 'all':\n",
    "          df = df[df['day_of_week'] == day.title()]\n",
    "         \n",
    "\n",
    "return df\n",
    "\n",
    "\n",
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display the most common month\n",
    "    df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "    df['month'] = df['Start Time'].dt.month\n",
    "    popular_month = df['month'].mode()\n",
    "    print(\"The most common month: \")\n",
    "    print(popular_month)\n",
    "    \n",
    "\n",
    "    # TO DO: display the most common day of week\n",
    "    df['day_of_week'] = df['Start Time'].dt.weekday_name\n",
    "    popular_day_of_week = df['day_of_week'].mode()\n",
    "    print(\"The most common day of week: \")\n",
    "    print(popular_day_of_week)\n",
    "    \n",
    "    \n",
    "\n",
    "    # TO DO: display the most common start hour\n",
    "    df['hour'] = df['Start Time'].dt.hour\n",
    "    popular_hour = df['hour'].mode()[0]\n",
    "    print(\"The most common start hour: \")\n",
    "    print(popular_hour)\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display most commonly used start station\n",
    "    popular_start_station = df['Start Station'].mode()\n",
    "    print(\"The most commonly used start station: \")\n",
    "    print(popular_start_station)\n",
    "\n",
    "    # TO DO: display most commonly used end station\n",
    "    popular_end_station = df['End Station'].mode()\n",
    "    print(\"The most commonly used end station: \")\n",
    "    print(popular_end_station)\n",
    "\n",
    "    # TO DO: display most frequent combination of start station and end station trip\n",
    "    popular_startandend_stations = df.groupby(['Start Station', 'End Station']).size().sort_values(ascending=False).nlargest(1)\n",
    "    print(\"The most commonly used start and end stations: \")\n",
    "    print(popular_startandend_stations)\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display total travel time\n",
    "    total_travel_time = df['Trip Duration'].sum()\n",
    "    print(\"The total travel time: \")\n",
    "    print(total_travel_time)\n",
    "\n",
    "    # TO DO: display mean travel time\n",
    "    mean_travel_time = df['Trip Duration'].mean()\n",
    "    print(\"The mean travel time: \")\n",
    "    print(mean_travel_time)\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def user_stats(df):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: Display counts of user types\n",
    "    if 'User Type' in df.columns:\n",
    "        user_types = df['User Type'].value_counts()\n",
    "        print(\"The counts of user types: \")\n",
    "        print(user_types)\n",
    "\n",
    "    # TO DO: Display counts of gender\n",
    "    try:\n",
    "        gender = df['Gender'].value.counts()\n",
    "        print(\" The counts of gender: \")\n",
    "        print(gender)\n",
    "    except:\n",
    "        print(\"There is no gender information available in this city\")\n",
    "        \n",
    "        \n",
    "\n",
    "    # TO DO: Display earliest, most recent, and most common year of birth\n",
    "    try:\n",
    "            earliest_birth = min(df['Birth Year'])\n",
    "            print(\"Earliest year of birth: \")\n",
    "            print(earliest_birth)\n",
    "            \n",
    "            most_recent_birth = max(df['Birth Year']) \n",
    "            print(\"Most recent year of birth: \")\n",
    "            print(most_recent_birth)\n",
    "            \n",
    "            most_common_birth = df['Birth Year'].mode()\n",
    "            print(\" Most common year of birth: \")\n",
    "            print(most_common_birth)\n",
    "            \n",
    "    except: \n",
    "            print(\"There is no birth year information available in this city\")\n",
    "            \n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "     \n",
    "    raw_data = input(\" Would you like to see some raw data? Enter yes or no.\\n\").lower()\n",
    "    n = 0\n",
    "    while raw_data == 'yes':\n",
    "        print(df[n:n+5])\n",
    "        n += 5\n",
    "    raw_data = input(\" Would you like to see some raw data? Enter yes or no.\\n\").lower()\n",
    "       \n",
    "\n",
    "def main():\n",
    "    while True:\n",
    "        city, month, day = get_filters()\n",
    "        df = load_data(city, month, day)\n",
    "\n",
    "        time_stats(df)\n",
    "        station_stats(df)\n",
    "        trip_duration_stats(df)\n",
    "        user_stats(df)\n",
    "\n",
    "        restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n",
    "        if restart.lower() != 'yes':\n",
    "            break\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "\tmain()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
